{
  "timestamp": "20241229_132900",
  "files_analyzed": 1,
  "files_improved": 1,
  "improvements": [
    {
      "file": "src\\cli.py",
      "issues": [
        {
          "type": "length",
          "message": "Function improve is too long (21 lines)",
          "line": 21,
          "function": "improve",
          "original": "@cli.command()\n@click.argument('file_path', type=click.Path(exists=True))\n@click.option('--config', '-c', type=click.Path(exists=True), default='config/settings.yaml', help='Path to config file')\n@click.option('--output', '-o', type=click.Path(), help='Path to save improvements (default: print to console)')\ndef improve(file_path: str, config: str, output: Optional[str]):\n    \"\"\"Analyze and improve the given Python file\"\"\"\n    try:\n        with open(config, 'r') as f:\n            config_data = yaml.safe_load(f)\n        auto_coder = AutoCoder(config_data)\n        result = asyncio.run(auto_coder.improve_code(Path(file_path)))\n        output_text = format_result(result)\n        if output:\n            Path(output).write_text(output_text)\n            click.echo(f'Improvements saved to {output}')\n        else:\n            click.echo(output_text)\n    except Exception as e:\n        logger.error(f'Error: {e}')\n        click.echo(f'Error: {e}', err=True)\n        raise click.Abort()"
        },
        {
          "type": "length",
          "message": "Function batch is too long (24 lines)",
          "line": 67,
          "function": "batch",
          "original": "@cli.command()\n@click.argument('directory', type=click.Path(exists=True))\n@click.option('--batch-size', '-b', default=5, help='Number of files to process in parallel')\n@click.option('--priority', '-p', type=click.Choice(['size', 'complexity', 'issues']), help='How to prioritize files')\ndef batch(directory: str, batch_size: int, priority: str):\n    \"\"\"Process multiple files in batches\"\"\"\n    try:\n        with open('config/settings.yaml', 'r') as f:\n            config = yaml.safe_load(f)\n        processor = BatchProcessor(config)\n        files = list(Path(directory).rglob('*.py'))\n        if priority:\n            files = processor.prioritize_files(files, priority)\n        results = asyncio.run(processor.process_batch(files, batch_size))\n        for result in results:\n            if result['status'] == 'success':\n                click.echo(f'\\nProcessed {result['file']}:')\n                click.echo(format_result(result['analysis']))\n            else:\n                click.echo(f'\\nError processing {result['file']}: {result['error']}')\n    except Exception as e:\n        logger.error(f'Batch processing error: {e}')\n        click.echo(f'Error: {e}', err=True)\n        raise click.Abort()"
        },
        {
          "type": "complexity",
          "message": "Function batch has high complexity (6)",
          "line": 67,
          "function": "batch",
          "original": "@cli.command()\n@click.argument('directory', type=click.Path(exists=True))\n@click.option('--batch-size', '-b', default=5, help='Number of files to process in parallel')\n@click.option('--priority', '-p', type=click.Choice(['size', 'complexity', 'issues']), help='How to prioritize files')\ndef batch(directory: str, batch_size: int, priority: str):\n    \"\"\"Process multiple files in batches\"\"\"\n    try:\n        with open('config/settings.yaml', 'r') as f:\n            config = yaml.safe_load(f)\n        processor = BatchProcessor(config)\n        files = list(Path(directory).rglob('*.py'))\n        if priority:\n            files = processor.prioritize_files(files, priority)\n        results = asyncio.run(processor.process_batch(files, batch_size))\n        for result in results:\n            if result['status'] == 'success':\n                click.echo(f'\\nProcessed {result['file']}:')\n                click.echo(format_result(result['analysis']))\n            else:\n                click.echo(f'\\nError processing {result['file']}: {result['error']}')\n    except Exception as e:\n        logger.error(f'Batch processing error: {e}')\n        click.echo(f'Error: {e}', err=True)\n        raise click.Abort()"
        },
        {
          "type": "nesting",
          "message": "Function batch has deep nesting (depth: 3)",
          "line": 67,
          "function": "batch",
          "original": "@cli.command()\n@click.argument('directory', type=click.Path(exists=True))\n@click.option('--batch-size', '-b', default=5, help='Number of files to process in parallel')\n@click.option('--priority', '-p', type=click.Choice(['size', 'complexity', 'issues']), help='How to prioritize files')\ndef batch(directory: str, batch_size: int, priority: str):\n    \"\"\"Process multiple files in batches\"\"\"\n    try:\n        with open('config/settings.yaml', 'r') as f:\n            config = yaml.safe_load(f)\n        processor = BatchProcessor(config)\n        files = list(Path(directory).rglob('*.py'))\n        if priority:\n            files = processor.prioritize_files(files, priority)\n        results = asyncio.run(processor.process_batch(files, batch_size))\n        for result in results:\n            if result['status'] == 'success':\n                click.echo(f'\\nProcessed {result['file']}:')\n                click.echo(format_result(result['analysis']))\n            else:\n                click.echo(f'\\nError processing {result['file']}: {result['error']}')\n    except Exception as e:\n        logger.error(f'Batch processing error: {e}')\n        click.echo(f'Error: {e}', err=True)\n        raise click.Abort()"
        }
      ],
      "improvements": [
        {
          "type": "maintainability",
          "description": "The `improve` function is too long and can be split into smaller, reusable functions for better maintainability.",
          "original": "```python\n@cli.command()\n@click.argument('file_path', type=click.Path(exists=True))\n@click.option('--config', '-c', type=click.Path(exists=True), default='config/settings.yaml', help='Path to config file')\n@click.option('--output', '-o', type=click.Path(), help='Path to save improvements (default: print to console)')\ndef improve(file_path: str, config: str, output: Optional[str]):\n\"\"\"Analyze and improve the given Python file\"\"\"\ntry:\nwith open(config, 'r') as f:\nconfig_data = yaml.safe_load(f)\nauto_coder = AutoCoder(config_data)\nresult = asyncio.run(auto_coder.improve_code(Path(file_path)))\noutput_text = format_result(result)\nif output:\nPath(output).write_text(output_text)\nclick.echo(f'Improvements saved to {output}')\nelse:\nclick.echo(output_text)\nexcept Exception as e:\nlogger.error(f'Error: {e}')\nclick.echo(f'Error: {e}', err=True)\nraise click.Abort()\n```\n",
          "improved": "```python\ndef load_config(config_path):\nwith open(config_path, 'r') as f:\nreturn yaml.safe_load(f)\n\ndef process_result(result, output_path=None):\noutput_text = format_result(result)\nif output_path:\nPath(output_path).write_text(output_text)\nclick.echo(f'Improvements saved to {output_path}')\nelse:\nclick.echo(output_text)\n\n@cli.command()\n@click.argument('file_path', type=click.Path(exists=True))\n@click.option('--config', '-c', type=click.Path(exists=True), default='config/settings.yaml', help='Path to config file')\n@click.option('--output', '-o', type=click.Path(), help='Path to save improvements (default: print to console)')\ndef improve(file_path: str, config: str, output: Optional[str]):\n\"\"\"Analyze and improve the given Python file\"\"\"\ntry:\nconfig_data = load_config(config)\nauto_coder = AutoCoder(config_data)\nresult = asyncio.run(auto_coder.improve_code(Path(file_path)))\nprocess_result(result, output)\nexcept Exception as e:\nlogger.error(f'Error: {e}')\nclick.echo(f'Error: {e}', err=True)\nraise click.Abort()\n```\n\n"
        },
        {
          "type": "maintainability",
          "description": "The `batch` function is too long, has high complexity, and deep nesting, making it harder to maintain. It can be refactored into smaller, more modular functions.",
          "original": "```python\n@cli.command()\n@click.argument('directory', type=click.Path(exists=True))\n@click.option('--batch-size', '-b', default=5, help='Number of files to process in parallel')\n@click.option('--priority', '-p', type=click.Choice(['size', 'complexity', 'issues']), help='How to prioritize files')\ndef batch(directory: str, batch_size: int, priority: str):\n\"\"\"Process multiple files in batches\"\"\"\ntry:\nwith open('config/settings.yaml', 'r') as f:\nconfig = yaml.safe_load(f)\nprocessor = BatchProcessor(config)\nfiles = list(Path(directory).rglob('*.py'))\nif priority:\nfiles = processor.prioritize_files(files, priority)\nresults = asyncio.run(processor.process_batch(files, batch_size))\nfor result in results:\nif result['status'] == 'success':\nclick.echo(f'\\nProcessed {result['file']}:')\nclick.echo(format_result(result['analysis']))\nelse:\nclick.echo(f'\\nError processing {result['file']}: {result['error']}')\nexcept Exception as e:\nlogger.error(f'Batch processing error: {e}')\nclick.echo(f'Error: {e}', err=True)\nraise click.Abort()\n```\n",
          "improved": "```python\ndef get_files(directory):\nreturn list(Path(directory).rglob('*.py'))\n\ndef prioritize_files(files, priority, processor):\nif priority:\nreturn processor.prioritize_files(files, priority)\nreturn files\n\ndef process_batch(files, batch_size, config):\nprocessor = BatchProcessor(config)\nreturn asyncio.run(processor.process_batch(files, batch_size))\n\ndef display_results(results):\nfor result in results:\nif result['status'] == 'success':\nclick.echo(f\"\\nProcessed {result['file']}:\")\nclick.echo(format_result(result['analysis']))\nelse:\nclick.echo(f\"\\nError processing {result['file']}: {result['error']}\")\n\n@cli.command()\n@click.argument('directory', type=click.Path(exists=True))\n@click.option('--batch-size', '-b', default=5, help='Number of files to process in parallel')\n@click.option('--priority', '-p', type=click.Choice(['size', 'complexity', 'issues']), help='How to prioritize files')\ndef batch(directory: str, batch_size: int, priority: str):\n\"\"\"Process multiple files in batches\"\"\"\ntry:\nconfig = load_config('config/settings.yaml')\nfiles = get_files(directory)\nfiles = prioritize_files(files, priority, BatchProcessor(config))\nresults = process_batch(files, batch_size, config)\ndisplay_results(results)\nexcept Exception as e:\nlogger.error(f'Batch processing error: {e}')\nclick.echo(f'Error: {e}', err=True)\nraise click.Abort()\n```\n\n"
        },
        {
          "type": "code_style",
          "description": "The `format_result` function can be made more readable by using f-strings and list comprehensions.",
          "original": "```python\ndef format_result(result: dict) -> str:\n\"\"\"Format the improvement result for output\"\"\"\nlines = [\nf\"Analysis Results for {result['file_path']}\",\n\"\\nIssues Found:\",\n]\n\nfor issue in result['analysis']['issues']:\nlines.append(f\"- {issue['message']} (line {issue['line']})\")\n\nmetrics = result['analysis']['metrics']\nlines.extend([\n\"\\nCode Metrics:\",\nf\"- Functions: {metrics['num_functions']}\",\nf\"- Classes: {metrics['num_classes']}\",\nf\"- Long functions: {len(metrics['long_functions'])}\",\nf\"- Large classes: {len(metrics['large_classes'])}\"\n])\n\nlines.extend([\n\"\\nSuggested Improvements:\",\nresult['improvements']\n])\n\nreturn '\\n'.join(lines)\n```\n",
          "improved": "```python\ndef format_result(result: dict) -> str:\n\"\"\"Format the improvement result for output\"\"\"\nissues = [f\"- {issue['message']} (line {issue['line']})\" for issue in result['analysis']['issues']]\nmetrics = result['analysis']['metrics']\nmetrics_lines = [\nf\"- Functions: {metrics['num_functions']}\",\nf\"- Classes: {metrics['num_classes']}\",\nf\"- Long functions: {len(metrics['long_functions'])}\",\nf\"- Large classes: {len(metrics['large_classes'])}\"\n]\n\nlines = [\nf\"Analysis Results for {result['file_path']}\",\n\"\\nIss\n"
        }
      ]
    }
  ]
}